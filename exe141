Given a linked list, determine if it has a cycle in it.

Follow up:
Can you solve it without using extra space?

Subscribe to see which companies asked this question

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        if(head==NULL || head->next==NULL)
            return false;
        ListNode *nextNode = head->next;
        ListNode *doubleNextNode = head->next->next;
        while(doubleNextNode!=NULL && doubleNextNode->next!=NULL && doubleNextNode->next->next!=NULL){
            if(nextNode == doubleNextNode)
                return true;
            nextNode = nextNode->next;
            doubleNextNode = doubleNextNode->next->next;

        }
        return false;
    }
};
